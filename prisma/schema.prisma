generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  phone          String         @unique
  role           UserRols       @default(USER)
  permissions    Permission[]   @relation("UserPermissions")
  password       String
  referalCode    String         @unique
  parainCode     String
  emailVerified  Boolean        @default(false)
  mobileVerified Boolean        @default(false)
  referredBy     User?          @relation("UserReferredBy", fields: [referredById], references: [id])
  referredById   Int?
  referredUsers  User[]         @relation("UserReferredBy")
  bets           Bet[]
  statuts        UserStatus     @default(PENDING_VERIFICATION)
  lastLogin      DateTime?
  failedAttempts Int            @default(0)
  lockoutUntil   DateTime?
  payments       Payment[]
  bonuses        Bonus[]
  wallet         Wallet?
  Notification   Notification[]
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int     @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum UserRols {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  BLOKED
  SUSPENDED
  PENDING_VERIFICATION
  DELETED
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]   @relation("UserPermissions")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bet {
  id        String   @id @default(cuid())
  matchId   Int
  userId    Int
  amount    Float
  match     Match    @relation(fields: [matchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELED
}

enum MatchStatus {
  ACTIVE
  PENDING
  IN_PROGRESS
  FINISHED
}

enum LeagueStatus {
  ACTIVE
  INACTIVE
}

model League {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  slug      String       @unique
  flag      String
  status    LeagueStatus @default(ACTIVE)
  matches   Match[]
  teams     Team[]
  createdAt DateTime     @default(now())
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  shortName   String
  slug        String   @unique
  flag        String
  league      League?  @relation(fields: [leagueId], references: [id])
  leagueId    Int?
  matchesHome Match[]  @relation("HomeMatches")
  matchesAway Match[]  @relation("AwayMatches")
  createdAt   DateTime @default(now())
}

model Match {
  id             Int         @id @default(autoincrement())
  league         League      @relation(fields: [leagueId], references: [id])
  leagueId       Int
  homeTeam       Team        @relation("HomeMatches", fields: [homeTeamId], references: [id])
  homeTeamId     Int
  awayTeam       Team        @relation("AwayMatches", fields: [awayTeamId], references: [id])
  awayTeamId     Int
  percentage     Float
  matchStartTime DateTime
  result         String?
  odds           Float?
  bets           Bet[]
  status         MatchStatus @default(PENDING)
  createdAt      DateTime    @default(now())
}

model Payment {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  amount    Float
  fee       Float
  type      PaymentType
  status    PaymentStatus
  createdAt DateTime      @default(now())
}

enum PaymentType {
  DEPOSIT
  WITHDRAWAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  title     String?
  message   String
  type      String
  createdAt DateTime @default(now())
}

enum NotificationType {
  CREDIT
  INFO
  WARNING
  ERROR
}

model Bonus {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  type        BonusType
  amount      Float
  description String
  createdAt   DateTime  @default(now())
}

enum BonusType {
  REFOUND
  SIGNUP
  DEPOSIT
  REFERRAL
  COMMISSION
}

model Wallet {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  balance   Float
  createdAt DateTime @default(now())
}
